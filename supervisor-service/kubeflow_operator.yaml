# RBAC rules are overly broad now.

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .service.prefix }}-leader-election-role
  namespace: {{ .service.namespace }}
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  labels:
    component: '{{ .service.prefix }}-operator'
  name: '{{ .service.prefix }}-operator'
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    component: '{{ .service.prefix }}-operator'
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: '{{ .service.prefix }}-kubeflow-editor-role'
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    component: '{{ .service.prefix }}-operator'
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: '{{ .service.prefix }}-kubeflow-viewer-role'
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .service.prefix }}-leader-election-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .service.prefix }}-leader-election-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: {{ .service.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    component: '{{ .service.prefix }}-operator'
  name: '{{ .service.prefix }}-operator'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: '{{ .service.prefix }}-operator'
subjects:
- kind: ServiceAccount
  name: default
  namespace: {{ .service.namespace }}
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080

    leaderElection:
      leaderElect: true
      resourceName: 811c9dc5.vmware.com
kind: ConfigMap
metadata:
  name: {{ .service.prefix }}-manager-config
  namespace: {{ .service.namespace }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: '{{ .service.prefix }}-operator'
  name: '{{ .service.prefix }}-operator'
  namespace: '{{ .service.namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      component: '{{ .service.prefix }}-operator'
  template:
    metadata:
      labels:
        component: '{{ .service.prefix }}-operator'
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: {{ .Values.registryName | default "projects.registry.vmware.com/kubeflow" }}/kubebuilder/kube-rbac-proxy:v0.8.0
        imagePullPolicy: IfNotPresent
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        - --leader-election-id=kubeflow-operator
        image: projects.registry.vmware.com/kubeflow/supervisor-service-operator:0.0.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 10m
            memory: 128Mi
      terminationGracePeriodSeconds: 10